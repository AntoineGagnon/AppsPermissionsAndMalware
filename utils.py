import hashlib
import os
import re
import subprocess
import time
from subprocess import run

import pandas
import requests
from lxml import html


def get_virustotal_resource(apk_path):
    params = {'apikey': '560659d3c1b977b5f1ffc3f3594fdc7001f48c7e7861428e72e7cf9f988aae3d'}
    apk_file = open(apk_path, 'rb')
    files = {'file': (apk_path, apk_file)}
    sha1 = hashlib.sha1()
    sha1.update(apk_file.read())
    sha1_checksum = sha1.hexdigest()
    vt_data = get_virustotal_data(sha1_checksum)
    status_code = 404
    if not vt_data:
        while status_code != 200:
            response = requests.post('https://www.virustotal.com/vtapi/v2/file/scan', files=files, params=params)
            status_code = response.status_code
            if status_code == 204:
                time.sleep(15)
        json_response = response.json()
        apk_file.close()
        return json_response["resource"], False
    else:
        return sha1_checksum, vt_data


def get_virustotal_data(resource):
    import requests
    status_code = 404

    params = {'apikey': '560659d3c1b977b5f1ffc3f3594fdc7001f48c7e7861428e72e7cf9f988aae3d', 'resource': resource}
    while status_code != 200:
        request_response = requests.post('https://www.virustotal.com/vtapi/v2/file/report',
                                         params=params)
        status_code = request_response.status_code
        if status_code == 204:
            time.sleep(15)

    json_response = request_response.json()

    if json_response["response_code"] == 1:
        scans_data = json_response["scans"]
        total_scans = 0
        true_scans = 0
        for scan in scans_data:
            total_scans += 1
            if scans_data[scan]["detected"]:
                true_scans += 1
        return true_scans, total_scans
    else:
        return 0

def get_perm_observatory(app):

    search_page = requests.get('https://androidobservatory.org/?q='+app.package+'&searchby=pkg')

    tree = html.fromstring(search_page.content)
    element = tree.xpath('/html/body/div[2]/div[3]/table/tbody/tr/td[2]/a')
    if element:
        address = element[0].attrib['href']

        app_page_address = 'https://androidobservatory.org' + address

        app_page = requests.get(app_page_address)
        app_page_content = app_page.content.decode('utf-8')
        vt_link = re.search('https://www.virustotal.com/#/file/([a-zA-Z0-9]*)',app_page_content)
        app.virus_total_resource = vt_link.group(1)
        app.save()
        permissions_list = re.findall('<td>([a-zA-Z_]*\.[a-zA-Z_]*(\.[a-zA-Z0-9_]*)*)',app_page_content)
        perms_list = []

        perm_data = pandas.read_json("permission_data.json")
        for match in permissions_list:
            if match[0] in perm_data:
                perms_list.append({"permission": perm_data[match[0]]["label"], "description": perm_data[match[0]]["description"]})
        return perms_list
    else:
        return

    pass


def get_permissions_from_apk(apk_path):
    if os.name == 'nt':
        bash_path = 'C:\\Program Files\\Git\\bin\\bash.exe'

        apkanalyzer_path = 'C:\\Users\\Antoine\\AppData\\Local\\Android\\Sdk\\tools\\bin\\apkanalyzer'

        result = run([bash_path, '-l',
                      apkanalyzer_path,
                      '-h', 'manifest', 'permissions', apk_path], capture_output=True)
    else:
        apkanalyzer_path = '/home/skynti/Android/Sdk/tools/bin/apkanalyzer'
        result = run([apkanalyzer_path, '-h', 'manifest', 'permissions', apk_path], shell=True, stdout=subprocess.PIPE)

    perm_data = pandas.read_json("permission_data.json")

    if result.stderr != b'':
        print("Error while checking APK, probably something wrong with downloader")
        exit()

    permissions = []
    output_lines = result.stdout.decode('utf-8').splitlines()
    for perm in output_lines:
        if perm in perm_data:
            permissions.append({"permission": perm_data[perm]["label"], "description": perm_data[perm]["description"]})
    return permissions
