import hashlib
import os
import subprocess
import time
from pathlib import Path
from subprocess import run

import pandas
import requests
from lxml import html


def get_virustotal_resource(apk_path):
    """
Find virustotal resource value. Either by using SHA1 value, or by uploading APK.
    :param apk_path:
    :return:
    """
    params = {'apikey': '560659d3c1b977b5f1ffc3f3594fdc7001f48c7e7861428e72e7cf9f988aae3d'}
    apk_file = open(apk_path, 'rb')
    files = {'file': (apk_path, apk_file)}
    sha1 = hashlib.sha1()
    sha1.update(apk_file.read())
    sha1_checksum = sha1.hexdigest()
    vt_data = get_virustotal_analysis(sha1_checksum)
    status_code = 404
    if not vt_data:
        # Wait and retry if we are throttled by VirusTotal
        while status_code != 200:
            response = requests.post('https://www.virustotal.com/vtapi/v2/file/scan', files=files, params=params)
            status_code = response.status_code
            if status_code == 204:
                time.sleep(15)

        json_response = response.json()
        apk_file.close()
        return json_response["resource"], False
    else:
        return sha1_checksum, vt_data


def get_virustotal_analysis(resource):
    """
Get virustotal analysis from resource.
    :param resource:
    :return:
    """
    import requests
    status_code = 404

    params = {'apikey': '560659d3c1b977b5f1ffc3f3594fdc7001f48c7e7861428e72e7cf9f988aae3d', 'resource': resource}
    while status_code != 200:
        request_response = requests.post('https://www.virustotal.com/vtapi/v2/file/report',
                                         params=params)
        status_code = request_response.status_code
        if status_code == 204:
            time.sleep(15)

    json_response = request_response.json()

    if json_response["response_code"] == 1:
        scans_data = json_response["scans"]
        total_scans = 0
        true_scans = 0
        for scan in scans_data:
            total_scans += 1
            if scans_data[scan]["detected"]:
                true_scans += 1
        return true_scans, total_scans
    else:
        return 0


def get_permissions_from_apk(apk_path):
    """
Get permission values from APK file using apkanalyzer.
    :param apk_path:
    :return:
    """
    if os.name == 'nt':
        bash_path = 'C:\\Program Files\\Git\\bin\\bash.exe'

        apkanalyzer_path = 'C:\\Users\\Antoine\\AppData\\Local\\Android\\Sdk\\tools\\bin\\apkanalyzer'

        result = run([bash_path, '-l',
                      apkanalyzer_path,
                      '-h', 'manifest', 'permissions', apk_path], capture_output=True)
    else:
        apkanalyzer_path = '/home/skynti/Android/Sdk/tools/bin/apkanalyzer'
        result = run([apkanalyzer_path, '-h', 'manifest', 'permissions', apk_path], shell=True, stdout=subprocess.PIPE)

    perm_data = pandas.read_json("permission_data.json")

    if result.stderr != b'':
        print("Error while checking APK, probably something wrong with downloader")
        exit()

    permissions = []
    output_lines = result.stdout.decode('utf-8').splitlines()
    for perm in output_lines:
        if perm in perm_data:
            permissions.append({"permission": perm_data[perm]["label"], "description": perm_data[perm]["description"]})
    return permissions


def get_package_apk(app):
    """
Find and download package apk.
    :param app:
    :return:
    """
    apk_path = Path("apk/" + app.package + ".apk")
    if apk_path.is_file():
        return apk_path.as_posix()

    # Download using gplaycli if app is available on GPlay
    if app.has_gplay and app.price == 0:
        gplaycli_path = 'gplaycli'
        result = run([gplaycli_path, '-d', app.package, "-f", "./apk"], shell=True,
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print(result)
        print(apk_path.as_posix())
        if result.stderr == b'':
            return apk_path.as_posix()
        if b"busy" in result.stderr:
            print("Gplay Server is busy")
            exit()

    # Try to find apk file on apkmirror.
    apk_mirror_search_url = 'https://www.apkmirror.com/?post_type=app_release&searchtype=apk&s='

    search_page = requests.get(apk_mirror_search_url + app.package)

    tree = html.fromstring(search_page.content)
    element = tree.xpath('//*[@id="content"]/div[2]/div[3]/div/div[4]/div/div[2]/a')
    if not element:
        return False

    address = element[0].attrib['href']

    if address:
        download_page_address = 'https://www.apkmirror.com' + address

        download_page = requests.get(download_page_address)

        download_tree = html.fromstring(download_page.content)

        download_element = download_tree.xpath('//*[@id="file"]/div[1]/div[2]/div/a')

        if download_element:

            download_link_suffix = download_element[0].attrib['href']

            download_link = 'https://www.apkmirror.com' + download_link_suffix

            if "download.php" in download_link:
                r = requests.get(download_link)

                f = open('./apk/' + app.package + '.apk', 'wb')
                f.write(r.content)
                f.close()
                return os.path.realpath(f.name)

            r = requests.get(download_link)

            download_tree = html.fromstring(r.content)
            download_element = download_tree.xpath('//article/div[2]/div/div/div[1]/p[2]/span/a')

            if download_element:
                download_link_suffix = download_element[0].attrib['href']

                download_link = 'https://www.apkmirror.com' + download_link_suffix

                r = requests.get(download_link)

                f = open('./apk/' + app.package + '.apk', 'wb')
                f.write(r.content)
                f.close()
                return os.path.realpath(f.name)
        else:
            download_element = download_tree.xpath('//*[@id="content"]/div[5]/div[2]/div/div[2]/div[1]/a')
            if not download_element:
                download_element = download_tree.xpath('//*[@id="content"]/div[5]/div[3]/div/div[2]/div[1]/a')

            download_link_suffix = download_element[0].attrib['href']

            download_link = 'https://www.apkmirror.com' + download_link_suffix + "download/"

            download_page = requests.get(download_link)

            download_tree = html.fromstring(download_page.content)

            if "Access denied" in download_tree.findtext('.//title'):
                print("ApkMirror is throttling")
                exit(-1)

            download_element = download_tree.xpath('//article/div[2]/div/div/div[1]/p[2]/span/a')

            if download_element:
                download_link_suffix = download_element[0].attrib['href']

                download_link = 'https://www.apkmirror.com' + download_link_suffix

                r = requests.get(download_link)

                f = open('./apk/' + app.package + '.apk', 'wb')
                f.write(r.content)
                f.close()
                return os.path.realpath(f.name)
    else:
        return False
