import os
import subprocess
from pathlib import Path
from subprocess import run

import requests
from lxml import html


def get_package_apk(app):
    apk_path = Path("apk/" + app.package + ".apk")
    if apk_path.is_file():
        return apk_path.as_posix()

    if app.has_gplay and app.price == 0:
        gplaycli_path = 'gplaycli'
        result = run([gplaycli_path, '-d', app.package, "-f", "./apk"], shell=True,
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print(result)
        print(apk_path.as_posix())
        if result.stderr == b'':
            return apk_path.as_posix()

    apk_mirror_search_url = 'https://www.apkmirror.com/?post_type=app_release&searchtype=apk&s='

    search_page = requests.get(apk_mirror_search_url + app.package)

    tree = html.fromstring(search_page.content)
    element = tree.xpath('//*[@id="content"]/div[2]/div[3]/div/div[4]/div/div[2]/a')
    if not element:
        return False

    address = element[0].attrib['href']

    if address:
        download_page_address = 'https://www.apkmirror.com' + address

        download_page = requests.get(download_page_address)

        download_tree = html.fromstring(download_page.content)

        download_element = download_tree.xpath('//*[@id="file"]/div[1]/div[2]/div/a')

        if download_element:

            download_link_suffix = download_element[0].attrib['href']

            download_link = 'https://www.apkmirror.com' + download_link_suffix

            if "download.php" in download_link:

                r = requests.get(download_link)

                f = open('./apk/' + app.package + '.apk', 'wb')
                f.write(r.content)
                return os.path.realpath(f.name)

            r = requests.get(download_link)

            download_tree = html.fromstring(r.content)
            download_element = download_tree.xpath('//article/div[2]/div/div/div[1]/p[2]/span/a')

            if download_element:
                download_link_suffix = download_element[0].attrib['href']

                download_link = 'https://www.apkmirror.com' + download_link_suffix

                r = requests.get(download_link)

                f = open('./apk/' + app.package + '.apk', 'wb')
                f.write(r.content)
                return os.path.realpath(f.name)
        else:
            download_element = download_tree.xpath('//*[@id="content"]/div[5]/div[2]/div/div[2]/div[1]/a')
            if not download_element:
                download_element = download_tree.xpath('//*[@id="content"]/div[5]/div[3]/div/div[2]/div[1]/a')

            download_link_suffix = download_element[0].attrib['href']

            download_link = 'https://www.apkmirror.com' + download_link_suffix + "download/"

            download_page = requests.get(download_link)

            download_tree = html.fromstring(download_page.content)

            if ("Access denied" in download_tree.findtext('.//title')):
                print("ApkMirror is throttling")
                exit(-1)

            download_element = download_tree.xpath('//article/div[2]/div/div/div[1]/p[2]/span/a')

            if download_element:
                download_link_suffix = download_element[0].attrib['href']

                download_link = 'https://www.apkmirror.com' + download_link_suffix

                r = requests.get(download_link)

                f = open('./apk/' + app.package + '.apk', 'wb')
                f.write(r.content)
                return os.path.realpath(f.name)


    else:
        return False
