import os
import sys
from enum import Enum

import pandas
import requests
from peewee import *
from tqdm import trange

from downloader import get_package_apk
from utils import get_permissions_from_apk, get_virustotal_resource, get_virustotal_data


class DL(Enum):
    NOT_CHECKED = 0
    EXISTS = 1
    NOT_EXIST = 2


db = SqliteDatabase('app_permissions.db')


class App(Model):
    app = CharField()
    package = CharField()
    category = CharField()
    description = TextField()
    rating = FloatField()
    number_of_ratings = IntegerField()
    price = FloatField()
    downloads = IntegerField()
    has_gplay = BooleanField()
    dl_available = IntegerField()
    virus_total_resource = TextField(null=True)

    class Meta:
        database = db


class Permission(Model):
    name = CharField()
    description = TextField()

    class Meta:
        database = db


class AccesPermission(Model):
    permission = ForeignKeyField(Permission, backref="permissions")
    app = ForeignKeyField(App, backref="permissions")

    class Meta:
        database = db


class AVReport(Model):
    app = ForeignKeyField(App, backref="permissions")
    number_warning = IntegerField()
    total_number = IntegerField()

    class Meta:
        database = db


db.connect()
db.create_tables([App, Permission, AccesPermission, AVReport])


def load_apps_data(file_name):
    print("Loading file {}".format(file_name))
    csv_data = pandas.read_csv("split_files/" + file_name, header=0)
    total_apps_counter = 0
    gplay_apps_counter = 0
    for i in trange(len(csv_data[csv_data.columns[1]])):
        try:
            package_name = csv_data[csv_data.columns[1]][i]
            app_query = App.select().where(App.package == package_name)
            if not app_query.exists():
                total_apps_counter += 1
                app_data = pandas.json.loads(requests.get("http://localhost:3000/api/apps/" + package_name).text)
                if "title" in app_data:
                    gplay_apps_counter += 1
                    App.create(app=app_data["title"], package=app_data["appId"], category=app_data["genre"],
                               description=app_data["description"], rating=4.3, number_of_ratings=4000,
                               price=app_data["price"], downloads=app_data["minInstalls"], has_gplay=True,
                               dl_available=DL.NOT_CHECKED.value)

                elif "message" in app_data and "404" in app_data["message"]:
                    price = float(csv_data[csv_data.columns[6]][i][1:])
                    App.create(app=csv_data[csv_data.columns[0]][i], package=csv_data[csv_data.columns[1]][i],
                               category=csv_data[csv_data.columns[2]][i],
                               description=csv_data[csv_data.columns[3]][i],
                               rating=csv_data[csv_data.columns[4]][i],
                               number_of_ratings=csv_data[csv_data.columns[5]][i], price=price, downloads=0,
                               has_gplay=False, dl_available=DL.NOT_CHECKED.value)
                else:
                    print("\nError got a weird message for {}: \n{}".format(package_name, app_data))
        except:
            print("Unexpected error on line {}: {}".format(i, sys.exc_info()))
    return total_apps_counter, gplay_apps_counter


def get_package_permissions(package_name):
    gplay_app_query = App.select().where(App.package == package_name)
    if not gplay_app_query.exists:
        return
    gplay_app = gplay_app_query.get()
    if gplay_app.has_gplay:
        permissions_data = pandas.json.loads(
            requests.get("http://localhost:3000/api/apps/" + package_name + "/permissions").text)
        for permission in permissions_data["results"]:
            perm_query = Permission.select().where(Permission.name == permission["permission"])
            if not perm_query.exists():
                permission_db = Permission.create(name=permission["permission"],
                                                  description=permission["description"])
            else:
                permission_db = perm_query.get()
            AccesPermission.create(permission=permission_db, app=gplay_app)
    else:

        apk_path = get_package_apk(package_name)
        permissions_data = get_permissions_from_apk(apk_path)
        for permission in permissions_data:
            perm_query = Permission.select().where(Permission.name == permission["permission"])
            if not perm_query.exists():
                permission_db = Permission.create(name=permission["permission"],
                                                  description=permission["description"])
            else:
                permission_db = perm_query.get()
            AccesPermission.create(permission=permission_db, app=gplay_app)


files = os.listdir("split_files")

print("Loading database app info")
# Load up database with Apps
for csv_file in files:
   load_apps_data(csv_file)

db_apps_packages = App.select()

print("Analyzing APKs")
for app in db_apps_packages:
    print("Checking app {}".format(app.package))
    # If it hasn't been downloaded, try to do it
    apk_path = get_package_apk(app.package)
    if app.dl_available == 0:
        print("App not downloaded")
        print("Got app in path {}".format(apk_path))
        if apk_path:
            app.dl_available = DL.EXISTS.value
            app.save()
        else:
            app.dl_available = DL.NOT_EXIST.value
            app.save()

    if app.dl_available == 1:
        print("App now downloaded")
        print("Got app in path {}".format(apk_path))
        ap_query = AccesPermission.select().where(app == app.id)
        if not ap_query.exists:
            print("Getting permissions")
            get_package_permissions(app.package)
        if not app.virus_total_resource:
            print("Getting VirusTotal Resource")
            resource = get_virustotal_resource(apk_path)
            app.virus_total_resource = resource
            app.save()
        else:
            print("Getting VirusTotal File Report")
            stats = get_virustotal_data(app.virus_total_resource)
            if stats:
                AVReport.create(app=app, number_warning=stats[0], total_number=stats[1])
