# TODO GET APP DATA

# TODO GET APP DATA
import os
from concurrent import futures
from concurrent.futures import ThreadPoolExecutor
from enum import Enum

import pandas
import requests
from peewee import *
from tqdm import trange
from joblib import Parallel, delayed

from downloader import apk_mirror_dl


class DL(Enum):
    NOT_CHECKED = 0
    EXISTS = 1
    NOT_EXIST = 2


db = SqliteDatabase('app_permissions.db')


class App(Model):
    app = CharField()
    package = CharField()
    category = CharField()
    description = TextField()
    rating = FloatField()
    number_of_ratings = IntegerField()
    price = FloatField()
    downloads = IntegerField()
    has_gplay = BooleanField()
    dl_available = IntegerField()

    class Meta:
        database = db


class Permission(Model):
    name = CharField()
    description = TextField()

    class Meta:
        database = db


class AccesPermission(Model):
    permission = ForeignKeyField(Permission, backref="permissions")
    app = ForeignKeyField(App, backref="permissions")

    class Meta:
        database = db


db.connect()
db.create_tables([App, Permission, AccesPermission])

def analyze_file(file):
    file_name = "split_files/" + file
    print("Loading file {}".format(file_name))
    csv_data = pandas.read_csv(file_name, header=0)
    total_apps_counter = 0
    gplay_apps_counter = 0
    for i in trange(len(csv_data[csv_data.columns[1]])):
        package_name = csv_data[csv_data.columns[1]][i]
        app_query = App.select().where(App.package == package_name)
        if not app_query.exists():
            total_apps_counter += 1
            app_data = pandas.json.loads(requests.get("http://localhost:3000/api/apps/" + package_name).text)
            if "title" in app_data:
                gplay_apps_counter += 1
                gplay_app = App.create(app=app_data["title"], package=app_data["appId"], category=app_data["genre"],
                                       description=app_data["description"], rating=4.3, number_of_ratings=4000,
                                       price=app_data["price"], downloads=app_data["minInstalls"], has_gplay=True,
                                       dl_available=DL.NOT_CHECKED.value)

                permissions_data = pandas.json.loads(
                    requests.get("http://localhost:3000/api/apps/" + package_name + "/permissions").text)
                for permission in permissions_data["results"]:
                    perm_query = Permission.select().where(Permission.description == permission["permission"])
                    if not perm_query.exists():
                        permission_db = Permission.create(name=permission["permission"],
                                                          description=permission["description"])
                    else:
                        permission_db = perm_query.get()
                    AccesPermission.create(permission=permission_db, app=gplay_app)

            elif("message" in app_data and "404" in app_data["message"] ):

                # TODO GET PERMISSIONS FOR NON-GPLAY
                price = float(csv_data[csv_data.columns[6]][i][1:])
                gplay_app = App.create(app=csv_data[csv_data.columns[0]][i], package=csv_data[csv_data.columns[1]][i],
                                       category=csv_data[csv_data.columns[2]][i],
                                       description=csv_data[csv_data.columns[3]][i],
                                       rating=csv_data[csv_data.columns[4]][i],
                                       number_of_ratings=csv_data[csv_data.columns[5]][i], price=price, downloads=0,
                                       has_gplay=False, dl_available=DL.NOT_CHECKED.value)
                # TODO GET NON GPLAY APPS DATA
            else:
                print("Error got a weird message : \n{}".format(app_data))
    return total_apps_counter, gplay_apps_counter


files = os.listdir("split_files")

executor = ThreadPoolExecutor(max_workers=len(files))


wait_for = [
    executor.submit(analyze_file, file)
    for file in files
]

for f in futures.as_completed(wait_for):
    print('main: result: Total apps : {} Gplay Apps : {}'.format(f.result()[0],f.result()[1]))


db_apps_packages = App.select()

for app in db_apps_packages:
    if app.dl_available == 0:
        apk_path = apk_mirror_dl(app.package_name)
        if apk_path:
            app.dl_available = DL.EXISTS
            analyse_virus(apk_path)
        else:
            app.dl_available = DL.NOT_EXIST
        # TODO CHECK VIRUS

        # TODO STORE VIRUS RESULT IN DB
