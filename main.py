import argparse
import os
import sys
from enum import Enum

import pandas
import requests
from peewee import *
from tqdm import trange, tqdm

from downloader import get_package_apk
from observatory_data import Permissions, App_Permissions, Apps
from utils import get_permissions_from_apk, get_virustotal_resource, get_virustotal_data, get_perm_observatory


class DL(Enum):
    NOT_CHECKED = 0
    EXISTS = 1
    NOT_EXIST = 2


db = SqliteDatabase('app_permissions_clean_storage.db')


class Main_Apps(Model):
    id = TextField(primary_key=True)
    uappid = TextField()
    pkgname = TextField()
    appname = TextField()
    binhash = TextField()
    binhash256 = TextField()
    md5 = TextField()
    dexhash = TextField()
    reshash = TextField()
    manifesthash = TextField()
    source = IntegerField()
    versionCode = IntegerField()
    timestamp = IntegerField()
    shareduserid = TextField()
    apkpath = TextField()
    version = BlobField()
    virfound = IntegerField()

    class Meta:
        database = db


class App(Model):
    app = CharField()
    package = CharField()
    category = CharField()
    rating = FloatField()
    number_of_ratings = IntegerField()
    price = FloatField()
    downloads = IntegerField()
    has_gplay = BooleanField()
    dl_available = IntegerField()
    virus_total_resource = TextField(null=True)

    class Meta:
        database = db


class Permission(Model):
    name = CharField()
    description = TextField(null=True)
    protection_level = CharField(null=True)

    class Meta:
        database = db


class AccessPermission(Model):
    permission = ForeignKeyField(Permission, backref="access")
    app = ForeignKeyField(App, backref="permissions")

    class Meta:
        database = db


class AVReport(Model):
    app = ForeignKeyField(App, backref="avreport")
    number_warning = IntegerField()
    total_number = IntegerField()

    class Meta:
        database = db


db.connect()
db.create_tables([App, Permission, AccessPermission, AVReport])


def load_apps_data(file_name):
    print("Loading file {}".format(file_name))
    csv_data = pandas.read_csv("split_files/" + file_name, header=0)
    total_apps_counter = 0
    gplay_apps_counter = 0
    for i in trange(len(csv_data[csv_data.columns[1]])):
        try:
            package_name = csv_data[csv_data.columns[1]][i]
            app_query = App.select().where(App.package == package_name)
            if not app_query.exists():
                price = float(csv_data[csv_data.columns[5]][i][1:])
                App.create(app=csv_data[csv_data.columns[0]][i], package=csv_data[csv_data.columns[1]][i],
                           category=csv_data[csv_data.columns[2]][i],
                           rating=csv_data[csv_data.columns[3]][i],
                           number_of_ratings=csv_data[csv_data.columns[4]][i], price=price, downloads=0,
                           has_gplay=False, dl_available=DL.NOT_CHECKED.value)
        except:
            print("Unexpected error on line {}: {}".format(i, sys.exc_info()))
    return total_apps_counter, gplay_apps_counter


def check_and_create_permissions(permission_name, gplay_app):
    perm_query = Permission.select().where(Permission.name == permission_name)
    if not perm_query.exists():
        permission_db = Permission.create(name=permission_name)
    else:
        permission_db = perm_query.get()
    if not AccessPermission.select().where(AccessPermission.permission == permission_db.id,
                                           AccessPermission.app == gplay_app.id).exists():
        AccessPermission.create(permission=permission_db, app=gplay_app)


def get_package_permissions(app):
    if app.has_gplay:
        permissions_request = requests.get("http://localhost:3000/api/apps/" + app.package + "/permissions")
        if permissions_request.status_code == 400:
            return
        permissions_data = permissions_request.json()
        if (not permissions_data["results"]):
            print("APP {}WAS DELETED BECAUSE NO PERMISSIONS".format(app.package))
            app.delete_instance()
            return
        for permission in permissions_data["results"]:
            check_and_create_permissions(permission, app)
    else:
        apk_path = get_package_apk(app)
        permissions_data = get_permissions_from_apk(apk_path)
        if not permissions_data:
            print("App doesn't have permissions, removing")
        for permission in permissions_data:
            check_and_create_permissions(permission, app)
        return apk_path


def permissions_analysis(app):
    print("Checking app {}".format(app.package))
    # If it hasn't been downloaded, try to do it
    if not app.dl_available == 2:

        if not app.permissions.exists() or not app.virus_total_resource:
            permissions_data = get_perm_observatory(app)
            if permissions_data:
                print("Using observatory")
                for permission in permissions_data:
                    check_and_create_permissions(permission, app)
                app.dl_available = DL.EXISTS.value
                app.save()
                return
        if app.dl_available == 0:
            if app.has_gplay:
                app.dl_available = DL.EXISTS.value
                app.save()
            else:
                apk_path = get_package_apk(app)
                if apk_path:
                    app.dl_available = DL.EXISTS.value
                    app.save()
                else:
                    print("App doesn't exist")
                    app.dl_available = DL.NOT_EXIST.value
                    app.save()

        if app.dl_available == 1:
            print("App has download")
            if not app.permissions.exists():
                print("Getting permissions")
                apk_path = get_package_permissions(app)
                return apk_path


def virus_analysis(app):
    if not app.virus_total_resource:
        apk_path = get_package_apk(app)
        if (not apk_path):
            print("APP {} WAS DELETED BECAUSE NO APK DOWNLOADED".format(app.package))
            # app.delete_instance()
            return
        print("Getting VirusTotal Resource")
        resource, vt_data = get_virustotal_resource(apk_path)
        app.virus_total_resource = resource
        if vt_data:
            AVReport.create(app=app, number_warning=vt_data[0], total_number=vt_data[1])
        app.save()
        return apk_path
    elif not app.avreport.exists():
        print("Getting VirusTotal File Report")
        stats = get_virustotal_data(app.virus_total_resource)
        if stats:
            AVReport.create(app=app, number_warning=stats[0], total_number=stats[1])


def observatory_analysis(app):
    obs_app = Apps.get(Apps.pkgname == app.package)
    if not app.virus_total_resource:
        virus_total_resource = obs_app.binhash
        app.virus_total_resource = virus_total_resource
        if not app.avreport.exists():
            stats = get_virustotal_data(virus_total_resource)
            if stats:
                AVReport.create(app=app, number_warning=stats[0], total_number=stats[1])
    if not app.permissions:
        id = obs_app.id
        permissions_links = App_Permissions.select().where(App_Permissions.app_id == id)
        for permission_link in permissions_links:
            permission = Permissions.get(Permissions.id == permission_link.perm_id)
            check_and_create_permissions(permission.name, app)
    app.save()


def main(args):
    if not args.no_load_db:
        files = os.listdir("split_files")

        print("Loading database app info")
        for csv_file in files:
            load_apps_data(csv_file)
    v2_apps = App.select(App.package)
    for obs_app in tqdm(Main_Apps.select().where(Main_Apps.pkgname.not_in(v2_apps))):
        if not App.select().where(App.package == obs_app.pkgname).exists():
            new_app = App.create(app=obs_app.appname, package=obs_app.pkgname,
                                 category="Unknown",
                                 rating=-1,
                                 number_of_ratings=-1, price=-1, downloads=-1,
                                 has_gplay=False, dl_available=DL.NOT_CHECKED.value,
                                 virus_total_resource=obs_app.binhash)
        else:
            new_app = App.get(App.package == obs_app.pkgname)
        if not new_app.permissions.exists():
            id = obs_app.id
            permissions_links = App_Permissions.select().where(App_Permissions.app_id == id)
            for permission_link in permissions_links:
                permission = Permissions.get(Permissions.id == permission_link.perm_id)
                check_and_create_permissions(permission.name, new_app)


    #
    # obs_apps = Main_Apps.select(Main_Apps.pkgname)
    #
    # cross_apps = App.select().where(App.package.in_(obs_apps))
    #
    # for app in tqdm(cross_apps):
    #     observatory_analysis(app)


def test():
    apps = App.select()
    print(apps[1].avreport.exists())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Get options for app check')
    # parser.add_argument('filename',help='specific data file to load')
    parser.add_argument('--no_load_db', help='Do not load DB', action="store_true")

    args = parser.parse_args()
    # test()
    main(args)
