import argparse
import os
import sys
import threading
from enum import Enum

import pandas
import requests
from peewee import *
from tqdm import trange, tqdm

from utils import get_permissions_from_apk, get_virustotal_resource, get_virustotal_analysis, get_package_apk


class DL(Enum):
    NOT_CHECKED = 0
    EXISTS = 1
    NOT_EXIST = 2


db = SqliteDatabase('app_permissions_clean_storage.db')


class App(Model):
    app = CharField()
    package = CharField()
    category = CharField()
    description = TextField()
    rating = FloatField()
    number_of_ratings = IntegerField()
    price = FloatField()
    downloads = IntegerField()
    has_gplay = BooleanField()
    dl_available = IntegerField()
    virus_total_resource = TextField(null=True)

    class Meta:
        database = db


class Permission(Model):
    name = CharField()
    description = TextField()
    protection_level = CharField(null=True)

    class Meta:
        database = db


class AccessPermission(Model):
    permission = ForeignKeyField(Permission, backref="access")
    app = ForeignKeyField(App, backref="permissions")

    class Meta:
        database = db


class AVReport(Model):
    app = ForeignKeyField(App, backref="avreport")
    number_warning = IntegerField()
    total_number = IntegerField()

    class Meta:
        database = db


db.connect()
db.create_tables([App, Permission, AccessPermission, AVReport])


def load_apps_data(file_name):
    """
Load app data from CSV file.
    :param file_name:
    :return:
    """
    print("Loading file {}".format(file_name))
    # Read the CSV Files
    csv_data = pandas.read_csv("split_files/" + file_name, header=0)
    total_apps_counter = 0
    gplay_apps_counter = 0
    for i in trange(len(csv_data[csv_data.columns[1]])):
        try:
            package_name = csv_data[csv_data.columns[1]][i]
            app_query = App.select().where(App.package == package_name)
            if not app_query.exists():
                total_apps_counter += 1
                app_data = pandas.json.loads(requests.get("http://localhost:3000/api/apps/" + package_name).text)
                # If the app is available on GPlay, get data from there.
                if "title" in app_data:
                    gplay_apps_counter += 1
                    App.create(app=app_data["title"], package=app_data["appId"], category=app_data["genre"],
                               description=app_data["description"], rating=4.3, number_of_ratings=4000,
                               price=app_data["price"], downloads=app_data["minInstalls"], has_gplay=True,
                               dl_available=DL.NOT_CHECKED.value)

                # Otherwise get data from CSV file.
                elif "message" in app_data and "404" in app_data["message"]:
                    price = float(csv_data[csv_data.columns[6]][i][1:])
                    App.create(app=csv_data[csv_data.columns[0]][i], package=csv_data[csv_data.columns[1]][i],
                               category=csv_data[csv_data.columns[2]][i],
                               description=csv_data[csv_data.columns[3]][i],
                               rating=csv_data[csv_data.columns[4]][i],
                               number_of_ratings=csv_data[csv_data.columns[5]][i], price=price, downloads=0,
                               has_gplay=False, dl_available=DL.NOT_CHECKED.value)
                else:
                    print("\nError got a weird message for {}: \n{}".format(package_name, app_data))
        except:
            print("Unexpected error on line {}: {}".format(i, sys.exc_info()))
    return total_apps_counter, gplay_apps_counter


def check_and_create_permissions(permission_data, gplay_app):
    """
Create permission from permission_data and link it to gplay_app
    :param permission_data:
    :param gplay_app:
    """
    perm_query = Permission.select().where(Permission.name == permission_data["permission"])
    if not perm_query.exists():
        permission_db = Permission.create(name=permission_data["permission"],
                                          description=permission_data["description"], )
    else:
        permission_db = perm_query.get()
    if not AccessPermission.select().where(AccessPermission.permission == permission_db.id,
                                           AccessPermission.app == gplay_app.id).exists():
        AccessPermission.create(permission=permission_db, app=gplay_app)


def get_package_permissions(app):
    """
Find and create app permissions.
    :param app:
    :return:
    """
    if app.has_gplay:
        # Get permissions from GPlay API
        permissions_request = requests.get("http://localhost:3000/api/apps/" + app.package + "/permissions")

        # If app is unavailable
        if permissions_request.status_code == 400:
            return -1
        permissions_data = permissions_request.json()

        # If we can't find the app anywhere and can't get any permission we don't need it.
        if not permissions_data["results"]:
            print("APP {} WAS DELETED BECAUSE NO PERMISSIONS FOUND".format(app.package))
            app.delete_instance()
            return -1
        for permission in permissions_data["results"]:
            check_and_create_permissions(permission, app)
    else:
        apk_path = get_package_apk(app)
        permissions_data = get_permissions_from_apk(apk_path)
        if not permissions_data:
            print("APP {} WAS DELETED BECAUSE NO PERMISSIONS FOUND".format(app.package))
            app.delete_instance()
            return -1
        for permission in permissions_data:
            check_and_create_permissions(permission, app)
        return apk_path


def check_download_available(app):
    """
Check if app download is available online.
    :param app:
    """
    if not app.dl_available == 2:
        if app.dl_available == 0:
            if app.has_gplay:
                # We assume that if an app is on GPlay we can download it.
                app.dl_available = DL.EXISTS.value
                app.save()
            else:
                apk_path = get_package_apk(app)
                if apk_path:
                    # APK is available on APKMirror
                    app.dl_available = DL.EXISTS.value
                    app.save()
                else:
                    # App isn't available in GPlay or APKMirror
                    app.dl_available = DL.NOT_EXIST.value
                    app.save()


def permissions_analysis(app):
    """
Check if app needs permissions analysis.
    :param app:
    :return:
    """
    print("Checking app {}".format(app.package))
    # If it hasn't been downloaded, try to do it
    if app.dl_available == 1:
        print("App has download")
        if not app.permissions.exists():
            print("Getting permissions")
            apk_path = get_package_permissions(app)
            return apk_path


def virus_analysis(app):
    """
Check app for viruses
    :param app:
    :return:
    """
    if not app.virus_total_resource:
        apk_path = get_package_apk(app)
        if not apk_path:
            print("APP {} WAS DELETED BECAUSE NO APK DOWNLOAD AVAILABLE".format(app.package))
            # app.delete_instance()
            return
        print("Getting VirusTotal Resource")
        resource, vt_data = get_virustotal_resource(apk_path)
        app.virus_total_resource = resource
        if vt_data:
            AVReport.create(app=app, number_warning=vt_data[0], total_number=vt_data[1])
        app.save()
        return apk_path
    elif not app.avreport.exists():
        print("Getting VirusTotal File Report")
        stats = get_virustotal_analysis(app.virus_total_resource)
        if stats:
            AVReport.create(app=app, number_warning=stats[0], total_number=stats[1])


def main(arguments):
    # If we can load the DB
    if not arguments.no_load_db:
        # If we have a specific file to load
        if arguments.filename:
            load_apps_data(arguments.filename)
        else:
            files = os.listdir("split_files")

            print("Loading database app info")
            for csv_file in files:
                load_apps_data(csv_file)

    db_apps_packages = App.select().order_by(App.id)
    thread_list = []

    print("Analyzing APKs")
    for app in tqdm(db_apps_packages):

        check_download_available(app)
        permissions_analysis(app)

        # Using multiple threads to speed up the requests for viruses
        if app.dl_available == 1:
            if len(thread_list) == 5:
                for thread in thread_list:
                    thread.join()
                thread_list = []

            if len(thread_list) < 5:
                # Virus analysis
                thread = threading.Thread(target=virus_analysis, args=(app,))
                thread_list.append(thread)
                thread.start()


def test():
    apps = App.select()
    print(apps[1].avreport.exists())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Get options for app check')
    parser.add_argument('filename',
                        help='specific data file to load')
    parser.add_argument('--no_load_db', help='Do not load DB', action="store_true")
    parser.add_argument('--test', help='Launch test function', action="store_true")

    args = parser.parse_args()

    if args.test:
        test()
    else:
        main(args)
